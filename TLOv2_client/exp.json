Server {
  nsps:
   { '/':
      Namespace {
        name: '/',
        server: [Circular],
        sockets: {},
        connected: {},
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Adapter] } },
  parentNsps: Map {},
  _path: '/socket.io',
  _serveClient: true,
  parser:
   { protocol: 4,
     types:
      [ 'CONNECT',
        'DISCONNECT',
        'EVENT',
        'ACK',
        'ERROR',
        'BINARY_EVENT',
        'BINARY_ACK' ],
     CONNECT: 0,
     DISCONNECT: 1,
     EVENT: 2,
     ACK: 3,
     ERROR: 4,
     BINARY_EVENT: 5,
     BINARY_ACK: 6,
     Encoder: [Function: Encoder],
     Decoder: [Function: Decoder] },
  encoder: Encoder {},
  _adapter: [Function: Adapter],
  _origins: '*:*',
  sockets:
   Namespace {
     name: '/',
     server: [Circular],
     sockets: {},
     connected: {},
     fns: [],
     ids: 0,
     rooms: [],
     flags: {},
     adapter:
      Adapter { nsp: [Circular], rooms: {}, sids: {}, encoder: Encoder {} } },
  eio:
   Server {
     clients: {},
     clientsCount: 0,
     wsEngine: 'ws',
     pingTimeout: 5000,
     pingInterval: 25000,
     upgradeTimeout: 10000,
     maxHttpBufferSize: 100000000,
     transports: [ 'polling', 'websocket' ],
     allowUpgrades: true,
     allowRequest: [Function: bound ],
     cookie: 'io',
     cookiePath: '/',
     cookieHttpOnly: true,
     perMessageDeflate: { threshold: 1024 },
     httpCompression: { threshold: 1024 },
     initialPacket: [ '0' ],
     ws:
      WebSocketServer {
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        options: [Object] },
     _events: { connection: [Function: bound ] },
     _eventsCount: 1 },
  httpServer:
   Server {
     _events:
      { connection: [Function: connectionListener],
        listening: [Array],
        close: [Function: bound ],
        upgrade: [Function],
        request: [Function] },
     _eventsCount: 5,
     _maxListeners: undefined,
     _connections: 0,
     _handle:
      TCP {
        reading: false,
        onread: null,
        onconnection: [Function: onconnection],
        [Symbol(owner)]: [Circular] },
     _usingWorkers: false,
     _workers: [],
     _unref: false,
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     keepAliveTimeout: 5000,
     _pendingResponseData: 0,
     maxHeadersCount: null,
     _connectionKey: '6::::3001',
     [Symbol(IncomingMessage)]: { [Function: IncomingMessage] super_: [Function] },
     [Symbol(ServerResponse)]: { [Function: ServerResponse] super_: [Function] },
     [Symbol(asyncId)]: 5 },
  engine:
   Server {
     clients: {},
     clientsCount: 0,
     wsEngine: 'ws',
     pingTimeout: 5000,
     pingInterval: 25000,
     upgradeTimeout: 10000,
     maxHttpBufferSize: 100000000,
     transports: [ 'polling', 'websocket' ],
     allowUpgrades: true,
     allowRequest: [Function: bound ],
     cookie: 'io',
     cookiePath: '/',
     cookieHttpOnly: true,
     perMessageDeflate: { threshold: 1024 },
     httpCompression: { threshold: 1024 },
     initialPacket: [ '0' ],
     ws:
      WebSocketServer {
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        options: [Object] },
     _events: { connection: [Function: bound ] },
     _eventsCount: 1 } }
Socket {
  io:
   Manager {
     nsps: { '/': [Circular] },
     subs: [ [Object], [Object], [Object] ],
     opts:
      { path: '/socket.io',
        hostname: '127.0.0.1',
        secure: false,
        port: '3000' },
     _reconnection: true,
     _reconnectionAttempts: Infinity,
     _reconnectionDelay: 1000,
     _reconnectionDelayMax: 5000,
     _randomizationFactor: 0.5,
     backoff:
      Backoff { ms: 1000, max: 5000, factor: 2, jitter: 0.5, attempts: 0 },
     _timeout: 20000,
     readyState: 'opening',
     uri: 'http://127.0.0.1:3000',
     connecting: [ [Circular] ],
     lastPing: null,
     encoding: false,
     packetBuffer: [],
     encoder: Encoder {},
     decoder: Decoder { reconstructor: null },
     autoConnect: true,
     engine:
      Socket {
        secure: false,
        agent: false,
        hostname: '127.0.0.1',
        port: '3000',
        query: {},
        upgrade: true,
        path: '/socket.io/',
        forceJSONP: false,
        jsonp: true,
        forceBase64: false,
        enablesXDR: false,
        timestampParam: 't',
        timestampRequests: undefined,
        transports: [Array],
        transportOptions: {},
        readyState: 'opening',
        writeBuffer: [],
        prevBufferLen: 0,
        policyPort: 843,
        rememberUpgrade: false,
        binaryType: null,
        onlyBinaryUpgrades: undefined,
        perMessageDeflate: [Object],
        pfx: null,
        key: null,
        passphrase: null,
        cert: null,
        ca: null,
        ciphers: null,
        rejectUnauthorized: true,
        forceNode: false,
        isReactNative: false,
        id: null,
        upgrades: null,
        pingInterval: null,
        pingTimeout: null,
        pingIntervalTimer: null,
        pingTimeoutTimer: null,
        transport: [XHR],
        _callbacks: [Object] },
     skipReconnect: false,
     _callbacks: { '$open': [Array], '$packet': [Array], '$close': [Array] } },
  nsp: '/',
  json: [Circular],
  ids: 0,
  acks: {},
  receiveBuffer: [],
  sendBuffer: [],
  connected: false,
  disconnected: true,
  flags: {},
  subs:
   [ { destroy: [Function: destroy] },
     { destroy: [Function: destroy] },
     { destroy: [Function: destroy] } ],
  _callbacks:
   { '$connecting': [ [Function: onConnecting] ],
     '$connect': [ [Function] ] } }